/*!
 * devextreme-angular
 * Version: 22.1.5
 * Build date: Fri Sep 02 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoGanttHeaderFilterTexts } from './base/gantt-header-filter-texts';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoTextsComponent extends DxoGanttHeaderFilterTexts {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'texts';
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
}
/** @nocollapse */ DxoTextsComponent.ɵfac = function DxoTextsComponent_Factory(t) { return new (t || DxoTextsComponent)(i0.ɵɵdirectiveInject(i1.NestedOptionHost, 5), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 1)); };
/** @nocollapse */ DxoTextsComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxoTextsComponent, selectors: [["dxo-texts"]], inputs: { fix: "fix", leftPosition: "leftPosition", rightPosition: "rightPosition", unfix: "unfix", addRow: "addRow", cancelAllChanges: "cancelAllChanges", cancelRowChanges: "cancelRowChanges", confirmDeleteMessage: "confirmDeleteMessage", confirmDeleteTitle: "confirmDeleteTitle", deleteRow: "deleteRow", editRow: "editRow", saveAllChanges: "saveAllChanges", saveRowChanges: "saveRowChanges", undeleteRow: "undeleteRow", validationCancelChanges: "validationCancelChanges", exportAll: "exportAll", exportSelectedRows: "exportSelectedRows", exportTo: "exportTo", clearFilter: "clearFilter", createFilter: "createFilter", filterEnabledHint: "filterEnabledHint", groupByThisColumn: "groupByThisColumn", groupContinuedMessage: "groupContinuedMessage", groupContinuesMessage: "groupContinuesMessage", ungroup: "ungroup", ungroupAll: "ungroupAll", cancel: "cancel", emptyValue: "emptyValue", ok: "ok", avg: "avg", avgOtherColumn: "avgOtherColumn", count: "count", max: "max", maxOtherColumn: "maxOtherColumn", min: "min", minOtherColumn: "minOtherColumn", sum: "sum", sumOtherColumn: "sumOtherColumn", allFields: "allFields", columnFields: "columnFields", dataFields: "dataFields", filterFields: "filterFields", rowFields: "rowFields", columnFieldArea: "columnFieldArea", dataFieldArea: "dataFieldArea", filterFieldArea: "filterFieldArea", rowFieldArea: "rowFieldArea", collapseAll: "collapseAll", dataNotAvailable: "dataNotAvailable", expandAll: "expandAll", exportToExcel: "exportToExcel", grandTotal: "grandTotal", noData: "noData", removeAllSorting: "removeAllSorting", showFieldChooser: "showFieldChooser", sortColumnBySummary: "sortColumnBySummary", sortRowBySummary: "sortRowBySummary", total: "total", addRowToNode: "addRowToNode" }, features: [i0.ɵɵProvidersFeature([NestedOptionHost]), i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTextsComponent_Template(rf, ctx) { }, styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoTextsComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-texts',
                template: '',
                styles: [''],
                providers: [NestedOptionHost],
                inputs: [
                    'fix',
                    'leftPosition',
                    'rightPosition',
                    'unfix',
                    'addRow',
                    'cancelAllChanges',
                    'cancelRowChanges',
                    'confirmDeleteMessage',
                    'confirmDeleteTitle',
                    'deleteRow',
                    'editRow',
                    'saveAllChanges',
                    'saveRowChanges',
                    'undeleteRow',
                    'validationCancelChanges',
                    'exportAll',
                    'exportSelectedRows',
                    'exportTo',
                    'clearFilter',
                    'createFilter',
                    'filterEnabledHint',
                    'groupByThisColumn',
                    'groupContinuedMessage',
                    'groupContinuesMessage',
                    'ungroup',
                    'ungroupAll',
                    'cancel',
                    'emptyValue',
                    'ok',
                    'avg',
                    'avgOtherColumn',
                    'count',
                    'max',
                    'maxOtherColumn',
                    'min',
                    'minOtherColumn',
                    'sum',
                    'sumOtherColumn',
                    'allFields',
                    'columnFields',
                    'dataFields',
                    'filterFields',
                    'rowFields',
                    'columnFieldArea',
                    'dataFieldArea',
                    'filterFieldArea',
                    'rowFieldArea',
                    'collapseAll',
                    'dataNotAvailable',
                    'expandAll',
                    'exportToExcel',
                    'grandTotal',
                    'noData',
                    'removeAllSorting',
                    'showFieldChooser',
                    'sortColumnBySummary',
                    'sortRowBySummary',
                    'total',
                    'addRowToNode'
                ]
            }]
    }], function () { return [{ type: i1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: i1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
export class DxoTextsModule {
}
/** @nocollapse */ DxoTextsModule.ɵfac = function DxoTextsModule_Factory(t) { return new (t || DxoTextsModule)(); };
/** @nocollapse */ DxoTextsModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxoTextsModule });
/** @nocollapse */ DxoTextsModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoTextsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoTextsComponent
                ],
                exports: [
                    DxoTextsComponent
                ],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxoTextsModule, { declarations: [DxoTextsComponent], exports: [DxoTextsComponent] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9kaXN0L3VpL25lc3RlZC90ZXh0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILG9DQUFvQztBQUVwQyxpREFBaUQ7QUFFakQsT0FBTyxFQUNILFNBQVMsRUFHVCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFFBQVEsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQU12QixPQUFPLEVBQ0gsZ0JBQWdCLEdBQ25CLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQXNFN0UsTUFBTSxPQUFPLGlCQUFrQixTQUFRLHlCQUF5QjtJQU81RCxZQUFnQyxnQkFBa0MsRUFDbEQsVUFBNEI7UUFDeEMsS0FBSyxFQUFFLENBQUM7UUFDUixnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBVkQsSUFBYyxXQUFXO1FBQ3JCLE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFXRCxRQUFRO1FBQ0osSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7cUdBckJRLGlCQUFpQjttR0FBakIsaUJBQWlCLHV3REEvRGYsQ0FBQyxnQkFBZ0IsQ0FBQzt1RkErRHBCLGlCQUFpQjtjQW5FN0IsU0FBUztlQUFDO2dCQUNQLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUUsRUFBRTtnQkFDWixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1osU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzdCLE1BQU0sRUFBRTtvQkFDSixLQUFLO29CQUNMLGNBQWM7b0JBQ2QsZUFBZTtvQkFDZixPQUFPO29CQUNQLFFBQVE7b0JBQ1Isa0JBQWtCO29CQUNsQixrQkFBa0I7b0JBQ2xCLHNCQUFzQjtvQkFDdEIsb0JBQW9CO29CQUNwQixXQUFXO29CQUNYLFNBQVM7b0JBQ1QsZ0JBQWdCO29CQUNoQixnQkFBZ0I7b0JBQ2hCLGFBQWE7b0JBQ2IseUJBQXlCO29CQUN6QixXQUFXO29CQUNYLG9CQUFvQjtvQkFDcEIsVUFBVTtvQkFDVixhQUFhO29CQUNiLGNBQWM7b0JBQ2QsbUJBQW1CO29CQUNuQixtQkFBbUI7b0JBQ25CLHVCQUF1QjtvQkFDdkIsdUJBQXVCO29CQUN2QixTQUFTO29CQUNULFlBQVk7b0JBQ1osUUFBUTtvQkFDUixZQUFZO29CQUNaLElBQUk7b0JBQ0osS0FBSztvQkFDTCxnQkFBZ0I7b0JBQ2hCLE9BQU87b0JBQ1AsS0FBSztvQkFDTCxnQkFBZ0I7b0JBQ2hCLEtBQUs7b0JBQ0wsZ0JBQWdCO29CQUNoQixLQUFLO29CQUNMLGdCQUFnQjtvQkFDaEIsV0FBVztvQkFDWCxjQUFjO29CQUNkLFlBQVk7b0JBQ1osY0FBYztvQkFDZCxXQUFXO29CQUNYLGlCQUFpQjtvQkFDakIsZUFBZTtvQkFDZixpQkFBaUI7b0JBQ2pCLGNBQWM7b0JBQ2QsYUFBYTtvQkFDYixrQkFBa0I7b0JBQ2xCLFdBQVc7b0JBQ1gsZUFBZTtvQkFDZixZQUFZO29CQUNaLFFBQVE7b0JBQ1Isa0JBQWtCO29CQUNsQixrQkFBa0I7b0JBQ2xCLHFCQUFxQjtvQkFDckIsa0JBQWtCO29CQUNsQixPQUFPO29CQUNQLGNBQWM7aUJBQ2pCO2FBQ0o7O3NCQVFnQixRQUFROztzQkFBSSxJQUFJOztzQkFDcEIsSUFBSTs7QUEwQmpCLE1BQU0sT0FBTyxjQUFjOzsrRkFBZCxjQUFjOytGQUFkLGNBQWM7O3VGQUFkLGNBQWM7Y0FSMUIsUUFBUTtlQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixpQkFBaUI7aUJBQ2xCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxpQkFBaUI7aUJBQ2xCO2FBQ0Y7O3dGQUNZLGNBQWMsbUJBbENkLGlCQUFpQixhQUFqQixpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMjIuMS41XG4gKiBCdWlsZCBkYXRlOiBGcmkgU2VwIDAyIDIwMjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp1c2UtaW5wdXQtcHJvcGVydHktZGVjb3JhdG9yICovXHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgT25Jbml0LFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgTmdNb2R1bGUsXHJcbiAgICBIb3N0LFxyXG4gICAgU2tpcFNlbGZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcblxyXG5cclxuXHJcblxyXG5pbXBvcnQge1xyXG4gICAgTmVzdGVkT3B0aW9uSG9zdCxcclxufSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IER4b0dhbnR0SGVhZGVyRmlsdGVyVGV4dHMgfSBmcm9tICcuL2Jhc2UvZ2FudHQtaGVhZGVyLWZpbHRlci10ZXh0cyc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2R4by10ZXh0cycsXHJcbiAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICBzdHlsZXM6IFsnJ10sXHJcbiAgICBwcm92aWRlcnM6IFtOZXN0ZWRPcHRpb25Ib3N0XSxcclxuICAgIGlucHV0czogW1xyXG4gICAgICAgICdmaXgnLFxyXG4gICAgICAgICdsZWZ0UG9zaXRpb24nLFxyXG4gICAgICAgICdyaWdodFBvc2l0aW9uJyxcclxuICAgICAgICAndW5maXgnLFxyXG4gICAgICAgICdhZGRSb3cnLFxyXG4gICAgICAgICdjYW5jZWxBbGxDaGFuZ2VzJyxcclxuICAgICAgICAnY2FuY2VsUm93Q2hhbmdlcycsXHJcbiAgICAgICAgJ2NvbmZpcm1EZWxldGVNZXNzYWdlJyxcclxuICAgICAgICAnY29uZmlybURlbGV0ZVRpdGxlJyxcclxuICAgICAgICAnZGVsZXRlUm93JyxcclxuICAgICAgICAnZWRpdFJvdycsXHJcbiAgICAgICAgJ3NhdmVBbGxDaGFuZ2VzJyxcclxuICAgICAgICAnc2F2ZVJvd0NoYW5nZXMnLFxyXG4gICAgICAgICd1bmRlbGV0ZVJvdycsXHJcbiAgICAgICAgJ3ZhbGlkYXRpb25DYW5jZWxDaGFuZ2VzJyxcclxuICAgICAgICAnZXhwb3J0QWxsJyxcclxuICAgICAgICAnZXhwb3J0U2VsZWN0ZWRSb3dzJyxcclxuICAgICAgICAnZXhwb3J0VG8nLFxyXG4gICAgICAgICdjbGVhckZpbHRlcicsXHJcbiAgICAgICAgJ2NyZWF0ZUZpbHRlcicsXHJcbiAgICAgICAgJ2ZpbHRlckVuYWJsZWRIaW50JyxcclxuICAgICAgICAnZ3JvdXBCeVRoaXNDb2x1bW4nLFxyXG4gICAgICAgICdncm91cENvbnRpbnVlZE1lc3NhZ2UnLFxyXG4gICAgICAgICdncm91cENvbnRpbnVlc01lc3NhZ2UnLFxyXG4gICAgICAgICd1bmdyb3VwJyxcclxuICAgICAgICAndW5ncm91cEFsbCcsXHJcbiAgICAgICAgJ2NhbmNlbCcsXHJcbiAgICAgICAgJ2VtcHR5VmFsdWUnLFxyXG4gICAgICAgICdvaycsXHJcbiAgICAgICAgJ2F2ZycsXHJcbiAgICAgICAgJ2F2Z090aGVyQ29sdW1uJyxcclxuICAgICAgICAnY291bnQnLFxyXG4gICAgICAgICdtYXgnLFxyXG4gICAgICAgICdtYXhPdGhlckNvbHVtbicsXHJcbiAgICAgICAgJ21pbicsXHJcbiAgICAgICAgJ21pbk90aGVyQ29sdW1uJyxcclxuICAgICAgICAnc3VtJyxcclxuICAgICAgICAnc3VtT3RoZXJDb2x1bW4nLFxyXG4gICAgICAgICdhbGxGaWVsZHMnLFxyXG4gICAgICAgICdjb2x1bW5GaWVsZHMnLFxyXG4gICAgICAgICdkYXRhRmllbGRzJyxcclxuICAgICAgICAnZmlsdGVyRmllbGRzJyxcclxuICAgICAgICAncm93RmllbGRzJyxcclxuICAgICAgICAnY29sdW1uRmllbGRBcmVhJyxcclxuICAgICAgICAnZGF0YUZpZWxkQXJlYScsXHJcbiAgICAgICAgJ2ZpbHRlckZpZWxkQXJlYScsXHJcbiAgICAgICAgJ3Jvd0ZpZWxkQXJlYScsXHJcbiAgICAgICAgJ2NvbGxhcHNlQWxsJyxcclxuICAgICAgICAnZGF0YU5vdEF2YWlsYWJsZScsXHJcbiAgICAgICAgJ2V4cGFuZEFsbCcsXHJcbiAgICAgICAgJ2V4cG9ydFRvRXhjZWwnLFxyXG4gICAgICAgICdncmFuZFRvdGFsJyxcclxuICAgICAgICAnbm9EYXRhJyxcclxuICAgICAgICAncmVtb3ZlQWxsU29ydGluZycsXHJcbiAgICAgICAgJ3Nob3dGaWVsZENob29zZXInLFxyXG4gICAgICAgICdzb3J0Q29sdW1uQnlTdW1tYXJ5JyxcclxuICAgICAgICAnc29ydFJvd0J5U3VtbWFyeScsXHJcbiAgICAgICAgJ3RvdGFsJyxcclxuICAgICAgICAnYWRkUm93VG9Ob2RlJ1xyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHhvVGV4dHNDb21wb25lbnQgZXh0ZW5kcyBEeG9HYW50dEhlYWRlckZpbHRlclRleHRzIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQgIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAndGV4dHMnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAU2tpcFNlbGYoKSBASG9zdCgpIHBhcmVudE9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsXHJcbiAgICAgICAgICAgIEBIb3N0KCkgb3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KHRoaXMsIHRoaXMuX2Z1bGxPcHRpb25QYXRoLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLl9hZGRSZWNyZWF0ZWRDb21wb25lbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLl9hZGRSZW1vdmVkT3B0aW9uKHRoaXMuX2dldE9wdGlvblBhdGgoKSk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIER4b1RleHRzQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBEeG9UZXh0c0NvbXBvbmVudFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeG9UZXh0c01vZHVsZSB7IH1cclxuIl19