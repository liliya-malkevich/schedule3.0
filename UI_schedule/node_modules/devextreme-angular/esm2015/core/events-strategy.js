/*!
 * devextreme-angular
 * Version: 22.1.5
 * Build date: Fri Sep 02 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { EventEmitter } from '@angular/core';
export class NgEventsStrategy {
    constructor(instance, zone) {
        this.instance = instance;
        this.zone = zone;
        this.subscriptions = {};
        this.events = {};
    }
    hasEvent(name) {
        return this.getEmitter(name).observers.length !== 0;
    }
    fireEvent(name, args) {
        let emitter = this.getEmitter(name);
        if (emitter.observers.length) {
            const internalSubs = this.subscriptions[name] || [];
            if (internalSubs.length === emitter.observers.length) {
                emitter.next(args && args[0]);
            }
            else {
                this.zone.run(() => emitter.next(args && args[0]));
            }
        }
    }
    on(name, handler) {
        if (typeof name === 'string') {
            let eventSubscriptions = this.subscriptions[name] || [], subcription = this.getEmitter(name).subscribe(handler.bind(this.instance)), unsubscribe = subcription.unsubscribe.bind(subcription);
            eventSubscriptions.push({ handler, unsubscribe });
            this.subscriptions[name] = eventSubscriptions;
        }
        else {
            let handlersObj = name;
            Object.keys(handlersObj).forEach(event => this.on(event, handlersObj[event]));
        }
    }
    off(name, handler) {
        let eventSubscriptions = this.subscriptions[name] || [];
        if (handler) {
            eventSubscriptions.some((subscription, i) => {
                if (subscription.handler === handler) {
                    subscription.unsubscribe();
                    eventSubscriptions.splice(i, 1);
                    return true;
                }
            });
        }
        else {
            eventSubscriptions.forEach(subscription => {
                subscription.unsubscribe();
            });
            eventSubscriptions.splice(0, eventSubscriptions.length);
        }
    }
    dispose() { }
    addEmitter(eventName, emitter) {
        this.events[eventName] = emitter;
    }
    getEmitter(eventName) {
        if (!this.events[eventName]) {
            this.events[eventName] = new EventEmitter();
        }
        return this.events[eventName];
    }
}
export class EmitterHelper {
    constructor(zone, component) {
        this.zone = zone;
        this.component = component;
        this.lockedValueChangeEvent = false;
    }
    fireNgEvent(eventName, eventArgs) {
        if (this.lockedValueChangeEvent && eventName === 'valueChange') {
            return;
        }
        let emitter = this.component[eventName];
        if (emitter && emitter.observers.length) {
            this.zone.run(() => {
                emitter.next(eventArgs && eventArgs[0]);
            });
        }
    }
    createEmitters(events) {
        events.forEach(event => {
            this.component[event.emit] = new EventEmitter();
        });
    }
}
//# sourceMappingURL=data:application/json;base64,