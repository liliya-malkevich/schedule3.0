import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import DxSlideOutView from 'devextreme/ui/slide_out_view';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
import * as i2 from "@angular/platform-browser";
/**
 * The SlideOutView UI component is a classic slide-out menu paired with a view. This UI component is very similar to the SlideOut with only one difference - the SlideOut always contains the List in the slide-out menu, while the SlideOutView can hold any collection there.

 */
export declare class DxSlideOutViewComponent extends DxComponent implements OnDestroy {
    instance: DxSlideOutView;
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * Specifies a custom template for the UI component content.
    
     */
    get contentTemplate(): any;
    set contentTemplate(value: any);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies the current menu position.
    
     */
    get menuPosition(): string;
    set menuPosition(value: string);
    /**
     * Specifies a custom template for the menu content.
    
     */
    get menuTemplate(): any;
    set menuTemplate(value: any);
    /**
     * Specifies whether or not the menu panel is visible.
    
     */
    get menuVisible(): boolean;
    set menuVisible(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether or not the menu is shown when a user swipes the UI component content.
    
     */
    get swipeEnabled(): boolean;
    set swipeEnabled(value: boolean);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuPositionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuVisibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    swipeEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSlideOutView;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSlideOutViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxSlideOutViewComponent, "dx-slide-out-view", never, { "activeStateEnabled": "activeStateEnabled"; "contentTemplate": "contentTemplate"; "disabled": "disabled"; "elementAttr": "elementAttr"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "menuPosition": "menuPosition"; "menuTemplate": "menuTemplate"; "menuVisible": "menuVisible"; "rtlEnabled": "rtlEnabled"; "swipeEnabled": "swipeEnabled"; "visible": "visible"; "width": "width"; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "activeStateEnabledChange": "activeStateEnabledChange"; "contentTemplateChange": "contentTemplateChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "menuPositionChange": "menuPositionChange"; "menuTemplateChange": "menuTemplateChange"; "menuVisibleChange": "menuVisibleChange"; "rtlEnabledChange": "rtlEnabledChange"; "swipeEnabledChange": "swipeEnabledChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxSlideOutViewModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSlideOutViewModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxSlideOutViewModule, [typeof DxSlideOutViewComponent], [typeof i1.DxIntegrationModule, typeof i1.DxTemplateModule, typeof i2.BrowserTransferStateModule], [typeof DxSlideOutViewComponent, typeof i1.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxSlideOutViewModule>;
}
